{"version":3,"sources":["components/View.js","components/helper_functions/isGreaterThan.js","components/helper_functions/isOperator.js","components/Keypad.js","components/helper_functions/calcPostfix.js","components/helper_functions/getPrecedence.js","components/helper_functions/isEqualQty.js","components/helper_functions/infixToPostfix.js","components/App.js","index.js"],"names":["View","solution","problem","sizeModifier","className","id","isGreaterThan","element1","element2","iterative","count","cur","isOperator","char","includes","Keypad","showProblem","hClick","isProblemHidden","init","hideProblem","ref","useRef","useEffect","window","addEventListener","event","key","isNaN","console","log","defaultStyle","renderBtn","arr","style","size","callBack","map","el","addToView","appProblem","appSolution","appisProblemHidden","newProblemArr","Array","from","lastChar","length","appInit","apphideProblem","join","shift","unshift","push","pop","stack","filter","type","value","onClick","onKeyDown","calculate","postFixStr","postFixArr","split","i","test","splice","Math","pow","Number","getPrecedence","symbol","isEqualQty","infixToPostfix","input","result","inputArr","replace","topOfStack","entries","index","stackStr","undefined","idx","element","trimEnd","App","useState","setProblem","problemDisplay","setProblemDisplay","setIsProblemHidden","setSizeModifier","setSolution","closeBracket","open","close","newProblem","slice","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.464eee69.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst View = ({ solution, problem, sizeModifier }) => {\r\n\treturn (\r\n\t\t<div className=\"parent d-flex flex-column justify-content-end pr-3 py-1 ml-3 mr-3 viewport rounded\">\r\n\t\t\t<span\r\n\t\t\t\tclassName={`d-inline-block text-wrap d-flex flex-row justify-content-end fs-${sizeModifier}`}\r\n\t\t\t\tid=\"solution\"\r\n\t\t\t>\r\n\t\t\t\t<strong>{solution || 0}</strong>\r\n\t\t\t</span>\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"equation d-flex flex-row justify-content-end text-black-50 font-weight-bold ls-1\"\r\n\t\t\t\tid=\"problem\"\r\n\t\t\t>\r\n\t\t\t\t{problem || ''}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default View;\r\n","//checks if element1 occurence in iterative is greater than element2\r\nconst isGreaterThan = function (element1, element2, iterative) {\r\n\tlet count = [0, 0];\r\n\r\n\tfor (const cur of iterative) {\r\n\t\tif (cur === element1) {\r\n\t\t\tcount[0]++;\r\n\t\t} else if (cur === element2) {\r\n\t\t\tcount[1]++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count[0] > count[1];\r\n};\r\n\r\nexport default isGreaterThan;\r\n","//checks if character is a mathematical operator\r\nconst isOperator = function (char) {\r\n\treturn ['+', '-', '/', '*', '^', '~', '%'].includes(char);\r\n};\r\n\r\nexport default isOperator;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport isGreaterThan from './helper_functions/isGreaterThan';\r\nimport isOperator from './helper_functions/isOperator';\r\n\r\n/* memory buttons disabled */\r\n/* \r\nTODO: keydown events for later update. Key identifiers already written in switch case.\r\n*/\r\n\r\nconst Keypad = ({\r\n\tshowProblem,\r\n\thClick,\r\n\tproblem,\r\n\tsolution,\r\n\tisProblemHidden,\r\n\tinit,\r\n\thideProblem,\r\n}) => {\r\n\tconst ref = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener('keydown', (event) => {\r\n\t\t\tconst keypadChars = ['Backspace', 'Delete', 'c', 'C', '.'];\r\n\r\n\t\t\tif (\r\n\t\t\t\tevent.key &&\r\n\t\t\t\t(keypadChars.includes(event.key) ||\r\n\t\t\t\t\tisOperator(event.key) ||\r\n\t\t\t\t\t!isNaN(event.key))\r\n\t\t\t) {\r\n\t\t\t\tconsole.log('key pressed ' + event.key);\r\n\t\t\t}\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst defaultStyle =\r\n\t\t'font-weight-bold btn-keypad border-grey rounded p-2 m-2 text-center btn unselectable';\r\n\r\n\tconst renderBtn = (arr, style, size = '2', callBack) => {\r\n\t\treturn arr.map((el) => {\r\n\t\t\tconst addToView = () => {\r\n\t\t\t\t//value props\r\n\t\t\t\tlet appProblem = problem;\r\n\t\t\t\tconst appSolution = solution;\r\n\t\t\t\tconst appisProblemHidden = isProblemHidden;\r\n\t\t\t\tlet newProblemArr = Array.from(appProblem);\r\n\t\t\t\tlet lastChar = newProblemArr[newProblemArr.length - 1];\r\n\r\n\t\t\t\t//function props\r\n\t\t\t\tconst appInit = init;\r\n\t\t\t\tconst apphideProblem = hideProblem;\r\n\r\n\t\t\t\tswitch (el) {\r\n\t\t\t\t\tcase 'CE':\r\n\t\t\t\t\t\treturn appInit(newProblemArr.join(''));\r\n\r\n\t\t\t\t\tcase 'c':\r\n\t\t\t\t\tcase 'C':\r\n\t\t\t\t\t\tapphideProblem();\r\n\t\t\t\t\t\treturn appInit();\r\n\r\n\t\t\t\t\tcase '=':\r\n\t\t\t\t\t\treturn appInit(0, appSolution);\r\n\r\n\t\t\t\t\tcase 'mc':\r\n\t\t\t\t\tcase 'mr':\r\n\t\t\t\t\tcase 'm+':\r\n\t\t\t\t\tcase 'm-':\r\n\t\t\t\t\tcase 'ms':\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase '+/-':\r\n\t\t\t\t\t\tif (newProblemArr[0] === '-') {\r\n\t\t\t\t\t\t\tnewProblemArr.shift();\r\n\t\t\t\t\t\t\tnewProblemArr.unshift('+');\r\n\t\t\t\t\t\t} else if (newProblemArr[0] === '+') {\r\n\t\t\t\t\t\t\tnewProblemArr.shift();\r\n\t\t\t\t\t\t\tnewProblemArr.unshift('-');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!isNaN(newProblemArr[0])) {\r\n\t\t\t\t\t\t\tnewProblemArr.unshift('+');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ')':\r\n\t\t\t\t\t\tif (lastChar !== '(') {\r\n\t\t\t\t\t\t\tnewProblemArr.push(')');\r\n\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tnewProblemArr.length === 1 ||\r\n\t\t\t\t\t\t\t\tisGreaterThan(')', '(', newProblemArr)\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Backspace':\r\n\t\t\t\t\tcase 'Delete':\r\n\t\t\t\t\tcase 'DEL':\r\n\t\t\t\t\t\tnewProblemArr.pop();\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t(newProblemArr.length === 1 &&\r\n\t\t\t\t\t\t\t\tisOperator(newProblemArr[0])) ||\r\n\t\t\t\t\t\t\t['(', ')'].includes(newProblemArr[0])\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (newProblemArr.length === 0) {\r\n\t\t\t\t\t\t\tapphideProblem();\r\n\t\t\t\t\t\t\treturn appInit();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase '.':\r\n\t\t\t\t\t\tif (isOperator(lastChar) || lastChar === '.') {\r\n\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//prevent two decimals in one number\r\n\t\t\t\t\t\tconst stack = newProblemArr.filter(\r\n\t\t\t\t\t\t\t(el) => isOperator(el) || ['(', ')', '.'].includes(el)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tstack.push(el);\r\n\t\t\t\t\t\tconst stackStr = stack.join('');\r\n\r\n\t\t\t\t\t\tif (!stackStr.includes('..')) {\r\n\t\t\t\t\t\t\tappisProblemHidden\r\n\t\t\t\t\t\t\t\t? (newProblemArr = [appSolution, el])\r\n\t\t\t\t\t\t\t\t: newProblemArr.push(el);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'X':\r\n\t\t\t\t\tcase 'x':\r\n\t\t\t\t\t\tif (isOperator(lastChar)) {\r\n\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnewProblemArr.push('*');\r\n\t\t\t\t\t\tif (appisProblemHidden && appSolution !== '0') {\r\n\t\t\t\t\t\t\tnewProblemArr = [appSolution, '*'];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif (isOperator(el)) {\r\n\t\t\t\t\t\t\tif (isOperator(lastChar)) {\r\n\t\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (appisProblemHidden) {\r\n\t\t\t\t\t\t\t\tnewProblemArr = [appSolution];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnewProblemArr.push(el);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log('newProblemArr: ' + newProblemArr.join(''));\r\n\t\t\t\tshowProblem();\r\n\t\t\t\thClick(newProblemArr.join(''));\r\n\t\t\t};\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<input\r\n\t\t\t\t\tkey={el}\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tclassName={`${defaultStyle} col-${size} ${style}`}\r\n\t\t\t\t\tvalue={el}\r\n\t\t\t\t\tonClick={callBack || addToView}\r\n\t\t\t\t\tonKeyDown={addToView}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div ref={ref} className=\"container m-2 mb-4\">\r\n\t\t\t<div className=\"row justify-content-center\">\r\n\t\t\t\t{renderBtn(\r\n\t\t\t\t\t['mc', 'mr', 'm+', 'm-', 'ms'],\r\n\t\t\t\t\t'btn-outline-secondary disabled',\r\n\t\t\t\t\t'1'\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t{renderBtn(['%'], 'btn-outline-secondary')}\r\n\t\t\t\t{renderBtn(['CE'], 'btn-outline-primary font-weight-bold')}\r\n\t\t\t\t{renderBtn(['C'], 'btn-outline-primary font-weight-bold')}\r\n\t\t\t\t{renderBtn(['DEL'], 'btn-outline-danger font-weight-bold')}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t{renderBtn(['^', '(', ')', '/'], 'btn-outline-secondary')}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t{renderBtn(['7', '8', '9'], 'btn-light')}\r\n\t\t\t\t{renderBtn(['x'], 'btn-outline-secondary')}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t{renderBtn(['4', '5', '6'], 'btn-light')}\r\n\t\t\t\t{renderBtn(['-'], 'btn-outline-secondary')}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t{renderBtn(['1', '2', '3'], 'btn-light')}\r\n\t\t\t\t{renderBtn(['+'], 'btn-outline-secondary')}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t{renderBtn(['+/-'], 'btn-outline-secondary')} {/* needs logic */}\r\n\t\t\t\t{renderBtn(['0'], 'btn-light')}\r\n\t\t\t\t{renderBtn(['.', '='], 'btn-outline-secondary')}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Keypad;\r\n","//.calculates postFix\r\nconst calculate = (postFixStr) => {\r\n\t//split postfix using spaces in between.\r\n\tlet postFixArr = postFixStr.split(' ');\r\n\r\n\tif (postFixStr !== 'invalid entry') {\r\n\t\tfor (let i = 0; i <= postFixArr.length - 1; ) {\r\n\t\t\tif (postFixArr[i] === '+' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) + Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '-' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) - Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '*' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) * Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '/' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) / Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '^' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tMath.pow(Number(postFixArr[i - 2]), Number(postFixArr[i - 1]))\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (/\\w/.test(postFixArr[i])) {\r\n\t\t\t\ti++;\r\n\t\t\t} else if (isNaN(postFixArr[i]) && isNaN(postFixArr[i - 2])) {\r\n\t\t\t\treturn 'invalid entry';\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log('end of calculation');\r\n\t\treturn postFixArr.join('');\r\n\t} else {\r\n\t\treturn 'invalid entry';\r\n\t}\r\n}; //#end of calculate function\r\n\r\nexport default calculate;\r\n","//evaluates level of symbol\r\nconst getPrecedence = function (symbol) {\r\n\tswitch (symbol) {\r\n\t\tcase '^':\r\n\t\t\treturn 5;\r\n\t\tcase '*':\r\n\t\tcase '/':\r\n\t\tcase '~':\r\n\t\t\treturn 4;\r\n\t\tcase '+':\r\n\t\tcase '-':\r\n\t\t\treturn 3;\r\n\t\tcase '(':\r\n\t\t\treturn 2;\r\n\t\tcase '=':\r\n\t\t\treturn 1;\r\n\r\n\t\tdefault:\r\n\t\t\treturn;\r\n\t}\r\n};\r\n\r\nexport default getPrecedence;\r\n","const isEqualQty = function (element1, element2, iterative) {\r\n\tlet count = [0, 0];\r\n\r\n\tfor (const cur of iterative) {\r\n\t\tif (cur === element1) {\r\n\t\t\tcount[0]++;\r\n\t\t} else if (cur === element2) {\r\n\t\t\tcount[1]++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count[0] === count[1];\r\n};\r\n\r\nexport default isEqualQty;\r\n","import getPrecedence from './getPrecedence';\r\nimport isEqualQty from './isEqualQty';\r\nimport isOperator from './isOperator';\r\n\r\n//.converts string of infix to postfix.\r\nconst infixToPostfix = function (input) {\r\n\tlet result = '';\r\n\tconst stack = [];\r\n\tlet inputArr = input.replace(/\\s/g, '').split('');\r\n\r\n\tconst isSpecialChar = function (char) {\r\n\t\treturn ['.', '%'].includes(char);\r\n\t};\r\n\r\n\t//get top of stack or (last element of stack array)\r\n\tconst topOfStack = () => {\r\n\t\treturn stack[stack.length - 1];\r\n\t};\r\n\r\n\t//#validator\r\n\tif (\r\n\t\t(!['+', '-', '.', '('].includes(inputArr[0]) && isNaN(inputArr[0])) ||\r\n\t\t!isEqualQty('(', ')', inputArr)\r\n\t) {\r\n\t\treturn 'invalid entry';\r\n\t}\r\n\r\n\tfor (const [index, value] of inputArr.entries()) {\r\n\t\t//protect against two consecutive decimals in one number\r\n\t\tif (isOperator(value) || ['(', ')', '.'].includes(value)) {\r\n\t\t\tstack.push(value);\r\n\t\t\tlet stackStr = stack.join('');\r\n\t\t\twhile (stack.length > 0) {\r\n\t\t\t\tstack.pop();\r\n\t\t\t}\r\n\t\t\tif (stackStr.includes('..')) {\r\n\t\t\t\treturn 'invalid entry';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//protect against missing operand\r\n\t\tif (isOperator(value) && isOperator(inputArr[index + 1])) {\r\n\t\t\treturn 'invalid entry';\r\n\t\t} else if (\r\n\t\t\tisSpecialChar(value) &&\r\n\t\t\tisOperator(inputArr[index - 1]) &&\r\n\t\t\tisOperator(inputArr[index + 1])\r\n\t\t) {\r\n\t\t\treturn 'invalid entry';\r\n\t\t} else if (value === '%' && isNaN(inputArr[index - 1])) {\r\n\t\t\treturn 'invalid entry';\r\n\t\t}\r\n\t}\r\n\r\n\t//#grouper\r\n\t//groups numeric values together\r\n\tfor (let i = 0; i <= inputArr.length - 1; ) {\r\n\t\tif (inputArr[0] === '.' && !isNaN(inputArr[1])) {\r\n\t\t\tinputArr.splice(i, 2, `0${inputArr[i] + inputArr[i + 1]}`);\r\n\t\t} else if (\r\n\t\t\t(isOperator(inputArr[i]) || ['(', ')'].includes(inputArr[i])) &&\r\n\t\t\tinputArr[i + 1] === '.'\r\n\t\t) {\r\n\t\t\tinputArr.splice(i + 1, 1, `0.`);\r\n\t\t} else if (inputArr[i + 1] === '.' && !inputArr[i].includes('.')) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[i] + inputArr[i + 1]);\r\n\t\t} else if (\r\n\t\t\t['+', '-'].includes(inputArr[i]) &&\r\n\t\t\t['('].includes(inputArr[i - 1]) &&\r\n\t\t\t!isNaN(inputArr[i + 1])\r\n\t\t) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[i] + inputArr[i + 1]);\r\n\t\t} else if (['+', '-'].includes(inputArr[0]) && !isNaN(inputArr[1])) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[0] + inputArr[1]);\r\n\t\t} else if (!isNaN(inputArr[i]) && !isNaN(inputArr[i + 1])) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[i] + inputArr[i + 1]);\r\n\t\t} else if (inputArr[i] === '(' && inputArr[i + 1] === ')') {\r\n\t\t\tinputArr.length === 2\r\n\t\t\t\t? inputArr.splice(i, 2, '0')\r\n\t\t\t\t: inputArr.splice(i, 2); //! empty bracket logic\r\n\t\t} else {\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\t//checks if parentheses if preceded by a number of operator. if it's alphanumeric, it inserts a '*' at beginning of the problem inside the parentheses so the solution inside the parentheses gets multiplied to the number outside before solving the rest of the problem\r\n\tif (input.includes('(')) {\r\n\t\tfor (const [index, value] of inputArr.entries()) {\r\n\t\t\t//add * before open bracket\r\n\t\t\tif (\r\n\t\t\t\tvalue === '(' &&\r\n\t\t\t\t(/\\w/.test(inputArr[index - 1]) || inputArr[index - 1] === ')') &&\r\n\t\t\t\tinputArr[index - 1] !== undefined\r\n\t\t\t) {\r\n\t\t\t\tinputArr.splice(index, 0, '*');\r\n\t\t\t}\r\n\r\n\t\t\t//add * after closing bracket\r\n\t\t\tif (\r\n\t\t\t\tvalue === ')' &&\r\n\t\t\t\t/\\w/.test(inputArr[index + 1]) &&\r\n\t\t\t\tinputArr[index + 1] !== undefined\r\n\t\t\t) {\r\n\t\t\t\tinputArr.splice(index + 1, 0, '*');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//evaluate inputArr and convert to postfix\r\n\tfor (let idx = 0; idx <= inputArr.length - 1; ) {\r\n\t\tlet element = inputArr[idx];\r\n\r\n\t\tif (!isNaN(element) && inputArr[idx + 1] === '%') {\r\n\t\t\t!isNaN(inputArr[idx + 2])\r\n\t\t\t\t? inputArr.splice(\r\n\t\t\t\t\t\tidx,\r\n\t\t\t\t\t\t3,\r\n\t\t\t\t\t\t`${\r\n\t\t\t\t\t\t\t(Number(inputArr[idx]) / 100) * Number(inputArr[idx + 2])\r\n\t\t\t\t\t\t} `\r\n\t\t\t\t  )\r\n\t\t\t\t: inputArr.splice(idx, 2, `${Number(inputArr[idx]) / 100} `);\r\n\t\t\tresult += inputArr[idx];\r\n\t\t} else if (/\\w/.test(element)) {\r\n\t\t\tresult += `${element} `;\r\n\t\t} else if (element === '(') {\r\n\t\t\tstack.push(element);\r\n\t\t} else if (element === ')') {\r\n\t\t\t//if element is closing parentheses, empty stack until open parantheses has been found\r\n\t\t\twhile (topOfStack() !== '(') {\r\n\t\t\t\tresult += `${stack.pop()} `;\r\n\t\t\t}\r\n\t\t\tstack.pop();\r\n\t\t} else {\r\n\t\t\t//if element is an operator, compare precedence with top of stack\r\n\t\t\tif (getPrecedence(element) <= getPrecedence(topOfStack())) {\r\n\t\t\t\tresult += `${stack.pop()} `;\r\n\t\t\t}\r\n\t\t\tstack.push(element);\r\n\t\t}\r\n\t\tidx++;\r\n\t}\r\n\r\n\t//push remaining operators in stack to result after each element has been evaluated\r\n\twhile (stack.length > 0) {\r\n\t\tresult += `${stack.pop()} `;\r\n\t}\r\n\r\n\t//since each operator and number is followed by a space, last number/operator will contain a space, this cleans that and prepares result for calculation which splits the string by space.\r\n\treturn result.trimEnd();\r\n}; //#end of infixToPostfix function;\r\n\r\nexport default infixToPostfix;\r\n","//components\r\nimport React, { useState } from 'react';\r\nimport View from './View';\r\nimport Keypad from './Keypad';\r\n\r\n//modules\r\nimport calculate from './helper_functions/calcPostfix';\r\nimport infixToPostfix from './helper_functions/infixToPostfix';\r\nimport '../index.scss';\r\nimport isOperator from './helper_functions/isOperator';\r\nimport isEqualQty from './helper_functions/isEqualQty';\r\n\r\nfunction App() {\r\n\tconst [problem, setProblem] = useState('');\r\n\tconst [problemDisplay, setProblemDisplay] = useState('');\r\n\tconst [isProblemHidden, setIsProblemHidden] = useState(true);\r\n\tconst [sizeModifier, setSizeModifier] = useState('xxl');\r\n\tconst [solution, setSolution] = useState('0');\r\n\r\n\tconst hideProblem = () => {\r\n\t\tsetIsProblemHidden(true);\r\n\t\tsetSizeModifier('xxl');\r\n\t};\r\n\r\n\tconst showProblem = () => {\r\n\t\tsetIsProblemHidden(false);\r\n\t\tsetSizeModifier('xl');\r\n\t};\r\n\r\n\tconst closeBracket = (open, close, arr) => {\r\n\t\twhile (!isEqualQty(open, close, arr)) {\r\n\t\t\tarr.push(close);\r\n\t\t}\r\n\t};\r\n\r\n\t//state controller function\r\n\tconst solve = (newProblem, newSolution = solution) => {\r\n\t\tsetProblem(newProblem);\r\n\t\tsetProblemDisplay(newProblem.replace(/\\*/g, 'x'));\r\n\r\n\t\tlet newProblemArr = Array.from(newProblem);\r\n\r\n\t\tif (calculate(infixToPostfix(newProblem)) !== 'invalid entry') {\r\n\t\t\t//if problem is clear of error, solve\r\n\t\t\tsetSolution(calculate(infixToPostfix(newProblem)));\r\n\t\t} else if (isOperator(newProblem.slice(-1))) {\r\n\t\t\t//if last character is operator, pop and solve.\r\n\t\t\tnewProblemArr.pop();\r\n\t\t\tif (isEqualQty('(', ')', newProblemArr)) {\r\n\t\t\t\tsetSolution(calculate(infixToPostfix(newProblemArr.join(''))));\r\n\t\t\t} else {\r\n\t\t\t\t//close parenthese if left open after popping operator\r\n\t\t\t\tcloseBracket('(', ')', newProblemArr);\r\n\t\t\t\tsetSolution(calculate(infixToPostfix(newProblemArr.join(''))));\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\t!isEqualQty('(', ')', newProblemArr) &&\r\n\t\t\t!isNaN(newProblem.slice(-1))\r\n\t\t) {\r\n\t\t\t// close parentheses if open.\r\n\t\t\tcloseBracket('(', ')', newProblemArr);\r\n\t\t\tsetSolution(calculate(infixToPostfix(newProblemArr.join(''))));\r\n\t\t}\r\n\t};\r\n\r\n\t//initialize states\r\n\tconst init = (problem, solution = 0) => {\r\n\t\tsetProblem(problem || '');\r\n\t\tsetProblemDisplay(problem ? problem.replace(/\\*/g, 'x') : '');\r\n\t\tsetSolution(solution);\r\n\r\n\t\tif (!problem) {\r\n\t\t\thideProblem();\r\n\t\t} else {\r\n\t\t\tshowProblem();\r\n\t\t}\r\n\r\n\t\tconsole.log(problem);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"\">\r\n\t\t\t<div className=\"container border border-dark mt-2\">\r\n\t\t\t\t<h2 className=\"pt-2 text-center\">Scientific Calculator</h2>\r\n\t\t\t\t<View\r\n\t\t\t\t\tproblem={problemDisplay}\r\n\t\t\t\t\tsolution={solution}\r\n\t\t\t\t\tisProblemHidden={isProblemHidden}\r\n\t\t\t\t\tsizeModifier={sizeModifier}\r\n\t\t\t\t/>\r\n\t\t\t\t<br />\r\n\t\t\t\t<Keypad\r\n\t\t\t\t\tproblem={problem}\r\n\t\t\t\t\thClick={solve}\r\n\t\t\t\t\tinit={init}\r\n\t\t\t\t\tsolution={solution}\r\n\t\t\t\t\thideProblem={hideProblem}\r\n\t\t\t\t\tshowProblem={showProblem}\r\n\t\t\t\t\tisProblemHidden={isProblemHidden}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<p className=\"container text-right\">&#169;Aren Ignacio</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","/* \r\nTODO:\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}