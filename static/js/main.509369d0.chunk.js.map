{"version":3,"sources":["components/View.js","components/getPrecedence.js","components/isEqualQty.js","components/isOperator.js","components/infixToPostfix.js","components/Keypad.js","components/calcPostfix.js","components/App.js","index.js"],"names":["View","state","sizeModifier","className","this","props","id","solution","problem","React","Component","getPrecedence","symbol","isEqualQty","element1","element2","iterative","count","cur","isOperator","char","includes","infixToPostfix","input","result","stack","inputArr","replace","split","topOfStack","length","isNaN","entries","index","value","push","stackStr","join","pop","i","splice","test","undefined","idx","element","Number","trimEnd","Keypad","defaultStyle","renderBtn","arr","style","size","callBack","map","el","key","type","onClick","isProblemHidden","hClick","init","hideProblem","newProblem","newProblemArr","Array","from","shift","unshift","slice","console","log","filter","showProblem","calculate","postFixStr","postFixArr","Math","pow","App","problemDisplay","setState","closeBracket","open","close","solve","problemHidden","deleteLastChar","deleteChar","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.509369d0.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nclass View extends React.Component {\r\n\t//useState just entered as part of learning process for hooks\r\n\tstate = { sizeModifier: 'xxl' };\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"parent d-flex flex-column justify-content-end pr-3 py-1 ml-3 mr-3 viewport rounded\">\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={`d-inline-block text-wrap d-flex flex-row justify-content-end fs-${this.props.sizeModifier}`}\r\n\t\t\t\t\tid=\"solution\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<strong>{this.props.solution || 0}</strong>\r\n\t\t\t\t</span>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"equation d-flex flex-row justify-content-end text-black-50 font-weight-bold ls-1\"\r\n\t\t\t\t\tid=\"problem\"\r\n\t\t\t\t>\r\n\t\t\t\t\t{this.props.problem || ''}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default View;\r\n","//evaluates level of symbol\r\nconst getPrecedence = function (symbol) {\r\n\tswitch (symbol) {\r\n\t\tcase '^':\r\n\t\t\treturn 5;\r\n\t\tcase '*':\r\n\t\tcase '/':\r\n\t\tcase '~':\r\n\t\t\treturn 4;\r\n\t\tcase '+':\r\n\t\tcase '-':\r\n\t\t\treturn 3;\r\n\t\tcase '(':\r\n\t\t\treturn 2;\r\n\t\tcase '=':\r\n\t\t\treturn 1;\r\n\r\n\t\tdefault:\r\n\t\t\treturn;\r\n\t}\r\n};\r\n\r\nexport default getPrecedence;\r\n","const isEqualQty = function (element1, element2, iterative) {\r\n\tlet count = [0, 0];\r\n\r\n\tfor (const cur of iterative) {\r\n\t\tif (cur === element1) {\r\n\t\t\tcount[0]++;\r\n\t\t} else if (cur === element2) {\r\n\t\t\tcount[1]++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count[0] === count[1];\r\n};\r\n\r\nexport default isEqualQty;\r\n","//checks if character is a mathematical operator\r\nconst isOperator = function (char) {\r\n\treturn ['+', '-', '/', '*', '^', '~', '%'].includes(char);\r\n};\r\n\r\nexport default isOperator;\r\n","import getPrecedence from './getPrecedence';\r\nimport isEqualQty from './isEqualQty';\r\nimport isOperator from './isOperator';\r\n\r\n//.converts string of infix to postfix.\r\nconst infixToPostfix = function (input) {\r\n\tlet result = '';\r\n\tconst stack = [];\r\n\tlet inputArr = input.replace(/\\s/g, '').split('');\r\n\r\n\tconst isSpecialChar = function (char) {\r\n\t\treturn ['.', '%'].includes(char);\r\n\t};\r\n\r\n\t//get top of stack or (last element of stack array)\r\n\tconst topOfStack = () => {\r\n\t\treturn stack[stack.length - 1];\r\n\t};\r\n\r\n\t//#validator\r\n\tif (\r\n\t\t(!['+', '-', '.', '('].includes(inputArr[0]) && isNaN(inputArr[0])) ||\r\n\t\t!isEqualQty('(', ')', inputArr)\r\n\t) {\r\n\t\treturn 'invalid entry';\r\n\t}\r\n\r\n\tfor (const [index, value] of inputArr.entries()) {\r\n\t\t//protect against two consecutive decimals in one number\r\n\t\tif (isOperator(value) || ['(', ')', '.'].includes(value)) {\r\n\t\t\tstack.push(value);\r\n\t\t\tlet stackStr = stack.join('');\r\n\t\t\twhile (stack.length > 0) {\r\n\t\t\t\tstack.pop();\r\n\t\t\t}\r\n\t\t\tif (stackStr.includes('..')) {\r\n\t\t\t\treturn 'invalid entry';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//protect against missing operand\r\n\t\tif (isOperator(value) && isOperator(inputArr[index + 1])) {\r\n\t\t\treturn 'invalid entry';\r\n\t\t} else if (\r\n\t\t\tisSpecialChar(value) &&\r\n\t\t\tisOperator(inputArr[index - 1]) &&\r\n\t\t\tisOperator(inputArr[index + 1])\r\n\t\t) {\r\n\t\t\treturn 'invalid entry';\r\n\t\t} else if (value === '%' && isNaN(inputArr[index - 1])) {\r\n\t\t\treturn 'invalid entry';\r\n\t\t}\r\n\t}\r\n\r\n\t//#grouper\r\n\t//groups numeric values together\r\n\tfor (let i = 0; i <= inputArr.length - 1; ) {\r\n\t\tif (inputArr[0] === '.' && !isNaN(inputArr[1])) {\r\n\t\t\tinputArr.splice(i, 2, `0${inputArr[i] + inputArr[i + 1]}`);\r\n\t\t} else if (\r\n\t\t\t(isOperator(inputArr[i]) || ['(', ')'].includes(inputArr[i])) &&\r\n\t\t\tinputArr[i + 1] === '.'\r\n\t\t) {\r\n\t\t\tinputArr.splice(i + 1, 1, `0.`);\r\n\t\t} else if (inputArr[i + 1] === '.' && !inputArr[i].includes('.')) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[i] + inputArr[i + 1]);\r\n\t\t} else if (\r\n\t\t\t['+', '-'].includes(inputArr[i]) &&\r\n\t\t\t['('].includes(inputArr[i - 1]) &&\r\n\t\t\t!isNaN(inputArr[i + 1])\r\n\t\t) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[i] + inputArr[i + 1]);\r\n\t\t} else if (['+', '-'].includes(inputArr[0]) && !isNaN(inputArr[1])) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[0] + inputArr[1]);\r\n\t\t} else if (!isNaN(inputArr[i]) && !isNaN(inputArr[i + 1])) {\r\n\t\t\tinputArr.splice(i, 2, inputArr[i] + inputArr[i + 1]);\r\n\t\t} else if (inputArr[i] === '(' && inputArr[i + 1] === ')') {\r\n\t\t\tinputArr.length === 2\r\n\t\t\t\t? inputArr.splice(i, 2, '0')\r\n\t\t\t\t: inputArr.splice(i, 2); //! empty bracket logic\r\n\t\t} else {\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\t//checks if parentheses if preceded by a number of operator. if it's alphanumeric, it inserts a '*' at beginning of the problem inside the parentheses so the solution inside the parentheses gets multiplied to the number outside before solving the rest of the problem\r\n\tif (input.includes('(')) {\r\n\t\tfor (const [index, value] of inputArr.entries()) {\r\n\t\t\t//add * before open bracket\r\n\t\t\tif (\r\n\t\t\t\tvalue === '(' &&\r\n\t\t\t\t(/\\w/.test(inputArr[index - 1]) || inputArr[index - 1] === ')') &&\r\n\t\t\t\tinputArr[index - 1] !== undefined\r\n\t\t\t) {\r\n\t\t\t\tinputArr.splice(index, 0, '*');\r\n\t\t\t}\r\n\r\n\t\t\t//add * after closing bracket\r\n\t\t\tif (\r\n\t\t\t\tvalue === ')' &&\r\n\t\t\t\t/\\w/.test(inputArr[index + 1]) &&\r\n\t\t\t\tinputArr[index + 1] !== undefined\r\n\t\t\t) {\r\n\t\t\t\tinputArr.splice(index + 1, 0, '*');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//evaluate inputArr and convert to postfix\r\n\tfor (let idx = 0; idx <= inputArr.length - 1; ) {\r\n\t\tlet element = inputArr[idx];\r\n\r\n\t\tif (!isNaN(element) && inputArr[idx + 1] === '%') {\r\n\t\t\t!isNaN(inputArr[idx + 2])\r\n\t\t\t\t? inputArr.splice(\r\n\t\t\t\t\t\tidx,\r\n\t\t\t\t\t\t3,\r\n\t\t\t\t\t\t`${\r\n\t\t\t\t\t\t\t(Number(inputArr[idx]) / 100) * Number(inputArr[idx + 2])\r\n\t\t\t\t\t\t} `\r\n\t\t\t\t  )\r\n\t\t\t\t: inputArr.splice(idx, 2, `${Number(inputArr[idx]) / 100} `);\r\n\t\t\tresult += inputArr[idx];\r\n\t\t} else if (/\\w/.test(element)) {\r\n\t\t\tresult += `${element} `;\r\n\t\t} else if (element === '(') {\r\n\t\t\tstack.push(element);\r\n\t\t} else if (element === ')') {\r\n\t\t\t//if element is closing parentheses, empty stack until open parantheses has been found\r\n\t\t\twhile (topOfStack() !== '(') {\r\n\t\t\t\tresult += `${stack.pop()} `;\r\n\t\t\t}\r\n\t\t\tstack.pop();\r\n\t\t} else {\r\n\t\t\t//if element is an operator, compare precedence with top of stack\r\n\t\t\tif (getPrecedence(element) <= getPrecedence(topOfStack())) {\r\n\t\t\t\tresult += `${stack.pop()} `;\r\n\t\t\t}\r\n\t\t\tstack.push(element);\r\n\t\t}\r\n\t\tidx++;\r\n\t}\r\n\r\n\t//push remaining operators in stack to result after each element has been evaluated\r\n\twhile (stack.length > 0) {\r\n\t\tresult += `${stack.pop()} `;\r\n\t}\r\n\r\n\t//since each operator and number is followed by a space, last number/operator will contain a space, this cleans that and prepares result for calculation which splits the string by space.\r\n\treturn result.trimEnd();\r\n}; //#end of infixToPostfix function;\r\n\r\nexport default infixToPostfix;\r\n","import React from 'react';\r\nimport infixToPostfix from './infixToPostfix';\r\nimport isEqualQty from './isEqualQty';\r\nimport isOperator from './isOperator';\r\n\r\n/* memory buttons disabled */\r\n\r\nclass Keypad extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tstate: {\r\n\t\t}\r\n\t}\r\n\r\n\tdefaultStyle =\r\n\t\t'font-weight-bold btn-keypad border-grey rounded p-2 m-2 text-center btn unselectable';\r\n\r\n\trenderBtn = (arr, style, size = '2', callBack) => {\r\n\t\treturn arr.map((el) => {\r\n\t\t\tconst addToView = () => {\r\n\t\t\t\t//value props\r\n\t\t\t\tlet problem = this.props.problem;\r\n\t\t\t\tconst solution = this.props.solution;\r\n\t\t\t\tconst isProblemHidden = this.props.isProblemHidden;\r\n\r\n\t\t\t\t//function props\r\n\t\t\t\tconst hClick = this.props.hClick;\r\n\t\t\t\tconst init = this.props.init;\r\n\t\t\t\tconst hideProblem = this.props.hideProblem;\r\n\r\n\t\t\t\tlet newProblem = problem + el;\r\n\t\t\t\tlet newProblemArr = Array.from(problem);\r\n\r\n\t\t\t\tswitch (el) {\r\n\t\t\t\t\tcase 'CE':\r\n\t\t\t\t\t\treturn init(problem);\r\n\r\n\t\t\t\t\tcase 'C':\r\n\t\t\t\t\t\thideProblem();\r\n\t\t\t\t\t\treturn init();\r\n\r\n\t\t\t\t\tcase 'mc':\r\n\t\t\t\t\tcase 'mr':\r\n\t\t\t\t\tcase 'm+':\r\n\t\t\t\t\tcase 'm-':\r\n\t\t\t\t\tcase 'ms':\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t/* hideProblem();\r\n\t\t\t\t\t\treturn init(0, solution); */\r\n\t\t\t\t\tcase '+/-':\r\n\t\t\t\t\t\tif (newProblemArr[0] === '-') {\r\n\t\t\t\t\t\t\tnewProblemArr.shift();\r\n\t\t\t\t\t\t\tnewProblemArr.unshift('+');\r\n\t\t\t\t\t\t\treturn hClick(newProblemArr.join(''));\r\n\t\t\t\t\t\t} else if (newProblemArr[0] === '+') {\r\n\t\t\t\t\t\t\tnewProblemArr.shift();\r\n\t\t\t\t\t\t\tnewProblemArr.unshift('-');\r\n\t\t\t\t\t\t\treturn hClick(newProblemArr.join(''));\r\n\t\t\t\t\t\t} else if (!isNaN(newProblemArr[0])) {\r\n\t\t\t\t\t\t\tnewProblemArr.unshift('+');\r\n\t\t\t\t\t\t\treturn hClick(newProblemArr.join(''));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\tcase ')':\r\n\t\t\t\t\t\tif (newProblem.includes('()')) {\r\n\t\t\t\t\t\t\treturn hClick(problem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'DEL':\r\n\t\t\t\t\t\t//copy this.props.problem to array and pop last element\r\n\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t//return mutated copy of problem into hClick\r\n\t\t\t\t\t\tif (newProblemArr.length === 0) {\r\n\t\t\t\t\t\t\thideProblem();\r\n\t\t\t\t\t\t\treturn init();\r\n\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\tnewProblemArr.length === 1 &&\r\n\t\t\t\t\t\t\tisOperator(newProblemArr[0])\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t\thideProblem();\r\n\t\t\t\t\t\t\treturn init();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn hClick(newProblemArr.join(''));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase '=': //needs more logic\r\n\t\t\t\t\t\treturn init(0, solution);\r\n\r\n\t\t\t\t\tcase '.':\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tisOperator(problem.slice(-1)) ||\r\n\t\t\t\t\t\t\tproblem.slice(-1) === '.'\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t\tproblem = newProblemArr.join('');\r\n\t\t\t\t\t\t\tconsole.log(newProblemArr);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst stack = newProblemArr.filter(\r\n\t\t\t\t\t\t\t(el) => isOperator(el) || ['(', ')', '.'].includes(el)\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tstack.push(el);\r\n\t\t\t\t\t\tconst stackStr = stack.join('');\r\n\r\n\t\t\t\t\t\tconsole.log(stack);\r\n\r\n\t\t\t\t\t\tif (stackStr.includes('..')) {\r\n\t\t\t\t\t\t\treturn hClick(newProblemArr.join(''));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tisProblemHidden\r\n\t\t\t\t\t\t\t? (newProblem = solution + el)\r\n\t\t\t\t\t\t\t: (newProblem = problem + el);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'x':\r\n\t\t\t\t\t\tif (isOperator(newProblemArr.pop())) {\r\n\t\t\t\t\t\t\tproblem = newProblemArr.join('');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tisProblemHidden\r\n\t\t\t\t\t\t\t? (newProblem = solution + '*')\r\n\t\t\t\t\t\t\t: (newProblem = problem + '*');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif (isOperator(el)) {\r\n\t\t\t\t\t\t\tif (isOperator(problem.slice(-1))) {\r\n\t\t\t\t\t\t\t\tnewProblemArr.pop();\r\n\t\t\t\t\t\t\t\tproblem = newProblemArr.join('');\r\n\t\t\t\t\t\t\t\tconsole.log(newProblemArr);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tisProblemHidden\r\n\t\t\t\t\t\t\t\t? (newProblem = solution + el)\r\n\t\t\t\t\t\t\t\t: (newProblem = problem + el);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log('newProblem: ' + newProblem);\r\n\t\t\t\tthis.props.showProblem();\r\n\t\t\t\tthis.props.hClick(newProblem);\r\n\t\t\t};\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<input\r\n\t\t\t\t\tkey={el}\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tclassName={`${this.defaultStyle} col-${size} ${style}`}\r\n\t\t\t\t\tvalue={el}\r\n\t\t\t\t\tonClick={callBack || addToView}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container m-2 mb-4\">\r\n\t\t\t\t<div className=\"row justify-content-center\">\r\n\t\t\t\t\t{this.renderBtn(\r\n\t\t\t\t\t\t['mc', 'mr', 'm+', 'm-', 'ms'],\r\n\t\t\t\t\t\t'btn-outline-secondary disabled',\r\n\t\t\t\t\t\t'1'\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t\t{this.renderBtn(['%'], 'btn-outline-secondary')}\r\n\t\t\t\t\t{this.renderBtn(['CE'], 'btn-outline-primary font-weight-bold')}\r\n\t\t\t\t\t{this.renderBtn(['C'], 'btn-outline-primary font-weight-bold')}\r\n\t\t\t\t\t{this.renderBtn(['DEL'], 'btn-outline-danger font-weight-bold')}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t\t{this.renderBtn(['^', '(', ')', '/'], 'btn-outline-secondary')}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t\t{this.renderBtn(['7', '8', '9'], 'btn-light')}\r\n\t\t\t\t\t{this.renderBtn(['x'], 'btn-outline-secondary')}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t\t{this.renderBtn(['4', '5', '6'], 'btn-light')}\r\n\t\t\t\t\t{this.renderBtn(['-'], 'btn-outline-secondary')}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t\t{this.renderBtn(['1', '2', '3'], 'btn-light')}\r\n\t\t\t\t\t{this.renderBtn(['+'], 'btn-outline-secondary')}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"row  justify-content-center\">\r\n\t\t\t\t\t{this.renderBtn(['+/-'], 'btn-outline-secondary')}{' '}\r\n\t\t\t\t\t{/* needs logic */}\r\n\t\t\t\t\t{this.renderBtn(['0'], 'btn-light')}\r\n\t\t\t\t\t{this.renderBtn(['.', '='], 'btn-outline-secondary')}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Keypad;\r\n","//.calculates postFix\r\nconst calculate = (postFixStr) => {\r\n\t//split postfix using spaces in between.\r\n\tlet postFixArr = postFixStr.split(' ');\r\n\r\n\tif (postFixStr !== 'invalid entry') {\r\n\t\tfor (let i = 0; i <= postFixArr.length - 1; ) {\r\n\t\t\tif (postFixArr[i] === '+' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) + Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '-' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) - Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '*' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) * Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '/' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tNumber(postFixArr[i - 2]) / Number(postFixArr[i - 1])\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (postFixArr[i] === '^' && !isNaN(postFixArr[i - 2])) {\r\n\t\t\t\tpostFixArr.splice(\r\n\t\t\t\t\ti - 2,\r\n\t\t\t\t\t3,\r\n\t\t\t\t\tMath.pow(Number(postFixArr[i - 2]), Number(postFixArr[i - 1]))\r\n\t\t\t\t);\r\n\t\t\t\ti = 0;\r\n\t\t\t} else if (/\\w/.test(postFixArr[i])) {\r\n\t\t\t\ti++;\r\n\t\t\t} else if (isNaN(postFixArr[i]) && isNaN(postFixArr[i - 2])) {\r\n\t\t\t\treturn 'invalid entry';\r\n\t\t\t}\r\n\t\t}\r\n\t\tconsole.log('end of calculation');\r\n\t\treturn postFixArr.join('');\r\n\t} else {\r\n\t\treturn 'invalid entry';\r\n\t}\r\n}; //#end of calculate function\r\n\r\nexport default calculate;\r\n","//components\r\nimport React from 'react';\r\nimport View from './View';\r\nimport Keypad from './Keypad';\r\n\r\n//modules\r\nimport calculate from './calcPostfix';\r\nimport infixToPostfix from './infixToPostfix';\r\nimport '../index.scss';\r\nimport isOperator from './isOperator';\r\nimport isEqualQty from './isEqualQty';\r\n\r\n/* \r\nTODO:\r\n//-Find a way to register keys from keypad and display them in view. something about binding function to \"this\" i.e. this.handleclick.bind(this) where handleclick is a function. it might be binding to parent component. see https://reactjs.org/docs/faq-functions.html#how-do-i-bind-a-function-to-a-component-instance\r\n//-remove Btn component and restructure Keypad component.\r\n//=needs functionality for Equal sign where solution is shown and problem display is cleared but pressing an operator will add on to solution.\r\n- \r\n */\r\n\r\nclass App extends React.Component {\r\n\tstate = {\r\n\t\tproblem: '',\r\n\t\tproblemDisplay: '',\r\n\t\tisProblemHidden: true,\r\n\t\tsizeModifier: 'xxl',\r\n\t\tsolution: '0',\r\n\t};\r\n\r\n\thideProblem = () => {\r\n\t\tthis.setState({ isProblemHidden: true });\r\n\t\tthis.setState({ sizeModifier: 'xxl' });\r\n\t};\r\n\r\n\tshowProblem = () => {\r\n\t\tthis.setState({ isProblemHidden: false });\r\n\t\tthis.setState({ sizeModifier: 'xl' });\r\n\t};\r\n\r\n\tcloseBracket = (open, close, arr) => {\r\n\t\twhile (!isEqualQty(open, close, arr)) {\r\n\t\t\tarr.push(close);\r\n\t\t}\r\n\t};\r\n\r\n\t//state controller function\r\n\tsolve = (newProblem, newSolution = this.state.solution) => {\r\n\t\tthis.setState({ problem: newProblem });\r\n\t\tthis.setState({ problemDisplay: newProblem.replace(/\\*/g, 'x') });\r\n\r\n\t\tlet newProblemArr = Array.from(newProblem);\r\n\r\n\t\tif (calculate(infixToPostfix(newProblem)) !== 'invalid entry') {\r\n\t\t\t//if problem is clear of error, solve\r\n\t\t\tthis.setState({ solution: calculate(infixToPostfix(newProblem)) });\r\n\t\t} else if (isOperator(newProblem.slice(-1))) {\r\n\t\t\t//if last character is operator, pop and solve.\r\n\t\t\tnewProblemArr.pop();\r\n\t\t\tif (isEqualQty('(', ')', newProblemArr)) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsolution: calculate(infixToPostfix(newProblemArr.join(''))),\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t//close parenthese if left open after popping operator\r\n\t\t\t\tthis.closeBracket('(', ')', newProblemArr);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsolution: calculate(infixToPostfix(newProblemArr.join(''))),\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else if (\r\n\t\t\t!isEqualQty('(', ')', newProblemArr) &&\r\n\t\t\t!isNaN(newProblem.slice(-1))\r\n\t\t) {\r\n\t\t\t// close parentheses if open.\r\n\t\t\tthis.closeBracket('(', ')', newProblemArr);\r\n\t\t\tthis.setState({\r\n\t\t\t\tsolution: calculate(infixToPostfix(newProblemArr.join(''))),\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tinit = (problem, solution = 0) => {\r\n\t\tthis.setState({ problem: problem || '' });\r\n\t\tthis.setState({\r\n\t\t\tproblemDisplay: problem ? problem.replace(/\\*/g, 'x') : '',\r\n\t\t});\r\n\t\tthis.setState({ solution: solution });\r\n\r\n\t\tif (!problem) {\r\n\t\t\tthis.hideProblem();\r\n\t\t} else {\r\n\t\t\tthis.showProblem();\r\n\t\t}\r\n\r\n\t\tconsole.log(problem);\r\n\t\tconsole.log(this.state.problem);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container border border-dark mt-2\">\r\n\t\t\t\t<h5 className=\"pt-2\">Calculator - Aren I.</h5>\r\n\t\t\t\t<View\r\n\t\t\t\t\tproblem={this.state.problemDisplay}\r\n\t\t\t\t\tsolution={this.state.solution}\r\n\t\t\t\t\tisProblemHidden={this.state.problemHidden}\r\n\t\t\t\t\tsizeModifier={this.state.sizeModifier}\r\n\t\t\t\t/>\r\n\t\t\t\t<br />\r\n\t\t\t\t<Keypad\r\n\t\t\t\t\tproblem={this.state.problem}\r\n\t\t\t\t\thClick={this.solve}\r\n\t\t\t\t\tdeleteLastChar={this.deleteChar}\r\n\t\t\t\t\tinit={this.init}\r\n\t\t\t\t\tsolution={this.state.solution}\r\n\t\t\t\t\thideProblem={this.hideProblem}\r\n\t\t\t\t\tshowProblem={this.showProblem}\r\n\t\t\t\t\tisProblemHidden={this.state.isProblemHidden}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/* function App(props) {\r\n\treturn (\r\n\t\t<div className=\"container border border-dark mt-2\">\r\n\t\t\t<h5 className=\"pt-2\">Calculator - Aren I.</h5>\r\n\t\t\t<View />\r\n\t\t\t<br />\r\n\t\t\t<Keypad />\r\n\t\t</div>\r\n\t);\r\n} */\r\n\r\nexport default App;\r\n","/* \r\nTODO:\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}